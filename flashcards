#!/bin/bash

version="0.2.0"
store_dir="${HOME}/.local/share/flashcards"
dependencies=("mkdir" "echo" "touch" "read" "printf" "shuf" "awk")
git_source="https://raw.githubusercontent.com/arnavcs/flashcards/main/flashcards"

######################
# AUXILARY FUNCTIONS #
######################

help_text () {
    while IFS= read -r line
    do
        printf "%s\n" "$line"
    done <<-EOF

Usage:
    ${0##*/} [-s <set>] [-w <word>] [-m <meaning>]
    ${0##*/} -h | -U | -V

Options:
    -s the flashcard set to be used ('default' if unspecified)
    -w the word
    -m the meaning
    -h show help text and exit
    -U fetch an update from github and exit
    -V print the version number and exit

Notes:
    If both the word and meaning are specified, a new flashcard will be added to the set.
    If only one of the word and meaning are specified, a matching flashcard will be searched for in the set.
    If neither are specified, a random flashcard will be displayed from the set.
EOF
}

update_script () {
    update="$(curl -s "$git_source" | diff -u "$0" -)"
    if [ -z $update ]; then
        echo "the script is up to date"
    else
        if printf '%s\n' "$update" | patch "$0" - ; then
            echo "the script has been updated"
        else
            echo "can't update the script"
        fi
    fi
}

version_text () {
    echo "Version: $version"
}

##################
# INPUT HANDLING #
##################

get_word_set () {
    [ ! -d $store_dir ] && mkdir $store_dir
    [ -z $word_set ] && word_set="default"
    [ ! -e $store_dir/$word_set.txt ] && touch $store_dir/$word_set.txt
}

handle_input () {
    if [ -z "$word" ] && [ -z "$meaning" ]; then
        get_random_flashcard
    elif [ -z "$word" ]; then
        get_word
    elif [ -z "$meaning" ]; then
        get_meaning
    else
        add_flashcard
    fi
}

########################
# FLASHCARD OPERATIONS #
########################

get_random_flashcard () {
    shuf -n 1 $store_dir/$word_set.txt
}

get_meaning () {
    awk -F "|" -v w="$word" '$1 == w {print $2}' $store_dir/$word_set.txt
}

get_word () {
    awk -F "|" -v m="$meaning" '$2 == m {print $1}' $store_dir/$word_set.txt
}

add_flashcard () {
    echo "$word|$meaning" >> $store_dir/$word_set.txt
}

############
# START UP #
############

word_set=""
word=""
meaning=""

while getopts "s:w:m:rhUV" flag; do
    case "${flag}" in
        s) word_set="${OPTARG}" ;;
        w) word="${OPTARG}" ;;
        m) meaning="${OPTARG}" ;;
        h) help_text
           exit 0 ;;
        U) update_script
           exit 0 ;;
        V) version_text
           exit 0 ;;
        *) help_text
           exit 1 ;;
    esac
done

get_word_set
handle_input
