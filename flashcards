#!/bin/bash

version="0.1.0"
store_dir="${HOME}/.local/share/flashcards"
dependencies=("mkdir" "echo" "touch" "read" "printf" "shuf")
git_source="https://raw.githubusercontent.com/arnavcs/flashcards/main/flashcards"

######################
# AUXILARY FUNCTIONS #
######################

help_text () {
    while IFS= read -r line
    do
        printf "%s\n" "$line"
    done <<-EOF

Usage:
    ${0##*/} [-s <set>] -w <word> -m <meaning>
    ${0##*/} [-s <set>] -r
    ${0##*/} -h | -U | -V

Options:
    -s the flashcard set to be used ('default' if unspecified)
    -w the word to be added to the flashcard set
    -m the meaning of the word to be added to the set
    -r get a random word and meaning pair from the set
    -h show help text and exit
    -U fetch an update from github and exit
    -V print the version number and exit
EOF
}

version_text () {
    echo "Version: $version"
}

die () {
    echo "$*"
    exit 1
}

####################
# INPUT SANITATION #
####################

set_sanitation () {
    if [ ! -d $store_dir ]
    then
        mkdir $store_dir
    fi

    if [ -z $word_set ]
    then
        word_set="default"
    fi

    if [ ! -e $store_dir/$word_set.txt ]
    then
        touch $store_dir/$word_set.txt
    fi
}

check_input_validity () {
    if [ $random = "true" ]
    then
        if [ ! -z $word ] || [ ! -z $meaning ]
        then
            die "can't use -r with -w or -m"
        fi
    else
        if [ -z $word ] || [ -z $meaning ]
        then
            die "specify both -w and -m"
        fi
    fi
}

########################
# FLASHCARD OPERATIONS #
########################

get_random_flashcard () {
    cat $store_dir/$word_set.txt | shuf -n 1
}

add_flashcard () {
    echo "$word | $meaning" >> $store_dir/$word_set.txt
}

############
# START UP #
############

word_set=""
random="false"
word=""
meaning=""

while getopts "s:w:m:rhUV" flag; do
    case "${flag}" in
        s) word_set="${OPTARG}" ;;
        w) word="${OPTARG}" ;;
        m) meaning="${OPTARG}" ;;
        r) random="true" ;;
        h) help_text
           exit 0 ;;
        V) version_text
           exit 0 ;;
        *) help_text
           exit 1 ;;
    esac
done

set_sanitation
check_input_validity
if [ $random = "false" ]
then
    add_flashcard
else
    get_random_flashcard
fi
